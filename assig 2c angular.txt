To create an Angular application that handles user registration, login, and displaying user data on a profile component, follow these steps:

Step 1: Set up a new Angular project
Open a terminal or command prompt and run the following command to create a new Angular project:
```
ng new user-management-app
```

Step 2: Create the necessary components
Navigate to the project directory:
```
cd user-management-app
```

Create the registration, login, and profile components:
```
ng generate component registration
ng generate component login
ng generate component profile
```

Step 3: Define routes
Open the `app-routing.module.ts` file in a text editor and add the following route definitions:
```typescript
import { NgModule } from '@angular/core';
import { Routes, RouterModule } from '@angular/router';
import { RegistrationComponent } from './registration/registration.component';
import { LoginComponent } from './login/login.component';
import { ProfileComponent } from './profile/profile.component';

const routes: Routes = [
  { path: '', redirectTo: '/register', pathMatch: 'full' },
  { path: 'register', component: RegistrationComponent },
  { path: 'login', component: LoginComponent },
  { path: 'profile', component: ProfileComponent }
];

@NgModule({
  imports: [RouterModule.forRoot(routes)],
  exports: [RouterModule]
})
export class AppRoutingModule { }
```

Step 4: Create registration form
Open the `registration.component.html` file and add the following registration form markup:
```html
<h2>Register User</h2>
<form (ngSubmit)="onSubmit()">
  <label for="name">Name:</label>
  <input type="text" id="name" name="name" [(ngModel)]="user.name" required>

  <label for="email">Email:</label>
  <input type="email" id="email" name="email" [(ngModel)]="user.email" required>

  <label for="password">Password:</label>
  <input type="password" id="password" name="password" [(ngModel)]="user.password" required>

  <button type="submit">Register</button>
</form>
```

Step 5: Create registration component logic
Open the `registration.component.ts` file and add the following logic to handle the registration form submission:
```typescript
import { Component } from '@angular/core';
import { Router } from '@angular/router';

@Component({
  selector: 'app-registration',
  templateUrl: './registration.component.html',
  styleUrls: ['./registration.component.css']
})
export class RegistrationComponent {
  user: any = {};

  constructor(private router: Router) { }

  onSubmit() {
    // Perform user registration logic here
    // For example, send an HTTP request to the server to register the user

    // After successful registration, navigate to the profile page
    this.router.navigateByUrl('/profile');
  }
}
```

Step 6: Repeat steps 4 and 5 for login and profile components
Repeat steps 4 and 5 for the login and profile components, adjusting the form and logic accordingly.

Step 7: Update app component template
Open the `app.component.html` file and replace its content with the following code:
```html
<h1>User Management App</h1>
<router-outlet></router-outlet>
```

Step 8: Update app module
Open the `app.module.ts` file and import the necessary modules:
```typescript
import { NgModule } from '@angular/core';
import { BrowserModule } from '@angular/platform-browser';
import { FormsModule } from '@angular/forms';

import { AppRoutingModule } from './app-routing.module';
import { AppComponent } from './app.component';
import { RegistrationComponent } from './registration/